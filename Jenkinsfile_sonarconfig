pipeline{
    agent any
    tools{
        nodejs 'node-16.0.0'
    }
    stages{
        stage('GIT'){
            steps{
                git changelog: false, poll: false, url: 'https://github.com/kosaraju3333/portal-spontansolutions.git'
            }
        }
        stage('SonarQube analysis') {
            environment{
                scannerHome = tool 'sonar-scanner'
            }
            steps{
                 withSonarQubeEnv('sonar-server') { // If you have configured more than one global server connection, you can specify its name
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }
        stage("Quality Gate"){
            steps{
                script{
                    timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
                        def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Build'){
            steps{
                sh "npm init -y"
                sh "npm i express.js body-parser knex pg nodemon"
            }
        }
    }
}
